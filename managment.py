import telebot
from telebot import types
import sqlite3
from config import settings
from datetime import datetime
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot(settings['TOKEN_MANG'])


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    if not is_user_exists(user_id):
        conn = connect_to_database()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO Users (user_id) VALUES (?)", (user_id,))
        conn.commit()
        conn.close()

        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        bot.register_next_step_handler(message, get_name)
    else:
        show_main_menu(message)


def show_main_menu(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

    button1 = types.KeyboardButton(text='/change_dataü•∂')
    button2 = types.KeyboardButton(text='/add_carüòà')
    button3 = types.KeyboardButton(text='/remove_carüíÄ')
    button4 = types.KeyboardButton(text='/create_guest_accessüôèüèø')
    button5 = types.KeyboardButton(text='/delete_guest_accessü§°')

    keyboard.add(button1, button2)
    keyboard.add(button3, button4)
    keyboard.add(button5)

    bot.send_message(message.chat.id, "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:", reply_markup=keyboard)


@bot.message_handler(commands=['change_dataü•∂'])
def change_data(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–∞–º–∏
    button1 = types.KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è')
    button2 = types.KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
    button3 = types.KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã')
    button4 = types.KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    back_button = types.KeyboardButton(text='–ù–∞–∑–∞–¥')

    keyboard.add(button1, button2)
    keyboard.add(button3, button4)
    keyboard.add(back_button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text.lower() == "–Ω–∞–∑–∞–¥")
def process_go_back(message):
    show_main_menu(message)


@bot.message_handler(func=lambda message: message.text.lower() in ["–∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è", "–∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é", "–∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"])
def process_change_data_choice(message):
    choice = message.text.lower()
    user_id = message.chat.id

    if "–∏–º—è" in choice:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        bot.register_next_step_handler(message, update_name)
    elif "—Ñ–∞–º–∏–ª–∏—é" in choice:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:")
        bot.register_next_step_handler(message, update_surname)
    elif "–Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã" in choice:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
        bot.register_next_step_handler(message, update_apartment_number)
    elif "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" in choice:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(message, update_phone_number)


def is_user_exists(user_id):
    conn = connect_to_database()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None


def get_name(message):
    name = message.text
    user_id = message.chat.id
    conn = connect_to_database()
    cursor = conn.cursor()
    cursor.execute("UPDATE Users SET first_name = ? WHERE user_id = ?", (name, user_id))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?")
    bot.register_next_step_handler(message, get_surname)


def get_surname(message):
    surname = message.text
    user_id = message.chat.id
    conn = connect_to_database()
    cursor = conn.cursor()
    cursor.execute("UPDATE Users SET last_name = ? WHERE user_id = ?", (surname, user_id))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ —Ç—ã –∂–∏–≤–µ—à—å?")
    bot.register_next_step_handler(message, get_apartment_number)


def get_apartment_number(message):
    apartment_number = message.text
    user_id = message.chat.id
    conn = connect_to_database()
    cursor = conn.cursor()
    cursor.execute("UPDATE Users SET apartment_number = ? WHERE user_id = ?", (apartment_number, user_id))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π —É —Ç–µ–±—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?")
    bot.register_next_step_handler(message, get_phone_number)


def get_phone_number(message):
    phone_number = message.text
    user_id = message.chat.id
    conn = connect_to_database()
    cursor = conn.cursor()
    cursor.execute("UPDATE Users SET phone_number = ? WHERE user_id = ?", (phone_number, user_id))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.")


def update_name(message):
    name = message.text
    user_id = message.chat.id
    conn = connect_to_database()
    cursor = conn.cursor()
    cursor.execute("UPDATE Users SET first_name = ? WHERE user_id = ?", (name, user_id))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "–ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")


def update_surname(message):
    surname = message.text
    user_id = message.chat.id
    conn = connect_to_database()
    cursor = conn.cursor()
    cursor.execute("UPDATE Users SET last_name = ? WHERE user_id = ?", (surname, user_id))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "–§–∞–º–∏–ª–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")


def update_apartment_number(message):
    apartment_number = message.text
    user_id = message.chat.id
    conn = connect_to_database()
    cursor = conn.cursor()
    cursor.execute("UPDATE Users SET apartment_number = ? WHERE user_id = ?", (apartment_number, user_id))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")


def update_phone_number(message):
    phone_number = message.text
    user_id = message.chat.id
    conn = connect_to_database()
    cursor = conn.cursor()
    cursor.execute("UPDATE Users SET phone_number = ? WHERE user_id = ?", (phone_number, user_id))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")


def connect_to_database():
    conn = sqlite3.connect('parking_management.db')
    return conn


@bot.message_handler(commands=['add_carüòà'])
def add_car(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    bot.register_next_step_handler(message, process_add_car)


def process_add_car(message):
    car_number = message.text
    user_id = message.chat.id
    conn = connect_to_database()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO Cars (user_id, car_number) VALUES (?, ?)", (user_id, car_number))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")


@bot.message_handler(commands=['remove_carüíÄ'])
def remove_car(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:")
    bot.register_next_step_handler(message, process_remove_car)


def process_remove_car(message):
    car_number = message.text
    user_id = message.chat.id
    conn = connect_to_database()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM Cars WHERE user_id=? AND car_number=?", (user_id, car_number))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")


@bot.message_handler(commands=['create_guest_accessüôèüèø'])
def process_create_guest_access_car(message):
    car_number = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    bot.register_next_step_handler(message, process_create_guest_access_start_date, car_number)


def process_create_guest_access_start_date(message, car_number):
    try:
        start_date = datetime.strptime(message.text, "%Y-%m-%d").date()
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        bot.register_next_step_handler(message, process_create_guest_access_start_time, car_number, start_date)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        bot.register_next_step_handler(message, process_create_guest_access_car)


def process_create_guest_access_start_time(message, car_number, start_date):
    try:
        start_time = datetime.strptime(message.text, "%H:%M").time()
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        bot.register_next_step_handler(message, process_create_guest_access_end_date, car_number, start_date, start_time)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
        bot.register_next_step_handler(message, process_create_guest_access_start_date, car_number)


def process_create_guest_access_end_date(message, car_number, start_date, start_time):
    try:
        end_date = datetime.strptime(message.text, "%Y-%m-%d").date()
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        bot.register_next_step_handler(message, process_create_guest_access_end_time, car_number, start_date, start_time, end_date)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        bot.register_next_step_handler


def process_create_guest_access_end_time(message, car_number, start_date, start_time, end_date):
    try:
        end_time = datetime.strptime(message.text, "%H:%M").time()

        # Convert dates and times to string format compatible with SQLite
        str_start_date = start_date.strftime("%Y-%m-%d")
        str_end_date = end_date.strftime("%Y-%m-%d")
        str_start_time = start_time.strftime("%H:%M")
        str_end_time = end_time.strftime("%H:%M")

        user_id = message.chat.id
        conn = connect_to_database()
        cursor = conn.cursor()

        # Use the converted string formats in the SQL query
        cursor.execute("INSERT INTO Guest_Accesses (user_id, car_number, start_date, end_date, start_time, end_time) VALUES (?, ?, ?, ?, ?, ?)",
                       (user_id, car_number, str_start_date, str_end_date, str_start_time, str_end_time))

        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, "–†–∞–∑–æ–≤—ã–π –≥–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
        bot.register_next_step_handler(message, process_create_guest_access_end_date, car_number, start_date, start_time)


@bot.message_handler(commands=['delete_guest_accessü§°'])
def delete_guest_access(message):
    conn = connect_to_database()
    cursor = conn.cursor()
    user_id = message.chat.id
    cursor.execute("SELECT * FROM Guest_Accesses WHERE user_id=?", (user_id,))
    guest_accesses = cursor.fetchall()
    conn.close()

    if guest_accesses:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        for guest_access in guest_accesses:
            bot.send_message(message.chat.id, f"ID: {guest_access[0]}, –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {guest_access[2]}, "
                                              f"–ù–∞—á–∞–ª–æ: {guest_access[3]} {guest_access[5]}, "
                                              f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {guest_access[4]} {guest_access[6]}")
        bot.register_next_step_handler(message, process_delete_guest_access)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥–æ—Å—Ç–µ–≤—ã—Ö –¥–æ—Å—Ç—É–ø–æ–≤.")


def process_delete_guest_access(message):
    guest_access_id = message.text
    conn = connect_to_database()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Guest_Accesses WHERE guest_access_id=?", (guest_access_id,))
    guest_access = cursor.fetchone()
    if guest_access:
        cursor.execute("DELETE FROM Guest_Accesses WHERE guest_access_id=?", (guest_access_id,))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, "–ì–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        conn.close()
        bot.send_message(message.chat.id, "–ì–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()